package contest_2ima20.client.gui;

import contest_2ima20.client.algorithms.AlgorithmList;
import contest_2ima20.client.problem.Algorithm;
import contest_2ima20.core.problem.Solution;
import contest_2ima20.core.problem.Problem;
import contest_2ima20.client.networking.Sender;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class AdvancedPane extends JPanel {

    /*
     * To change this license header, choose License Headers in Project Properties.
     * To change this template file, choose Tools | Templates
     * and open the template in the editor.
     */
    JDialog frame;
    MainPane mainPane;
    JFileChooser exportPicker;
    Thread checkerThread;
    Thread readerThread;

    /**
     * Creates new form test
     */
    public AdvancedPane(MainPane mainPane, JDialog frame) {
        super();
        this.frame = frame;
        this.mainPane = mainPane;

        initComponents();

        if (checkerThread != null && checkerThread.isAlive()) {
            batchChecker.setText("Abort");
        }

        if (SettingsPane.getExportPath() != null) {
            String path = SettingsPane.getExportPath().getAbsolutePath();
            if (path.length() > 30) {
                path = path.substring(0, 8) + "...." + path.substring(path.length() - 15, path.length());
            }
            outputDirectoryLabel.setText(path);
        }

        autoExportSolutions.setSelected(SettingsPane.isAutoExportSolutions());

        exportPicker = new JFileChooser();
        exportPicker.setFileFilter(new FolderFilter());
        exportPicker.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (SettingsPane.getExportPath() != null && SettingsPane.getExportPath().exists()) {
            exportPicker.setCurrentDirectory(SettingsPane.getExportPath());
        } else {
            autoExportSolutions.setEnabled(false);
            SettingsPane.setAutoExportSolutions(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        batchSolver = new javax.swing.JButton();
        batchChecker = new javax.swing.JButton();
        setOutputDirectory = new javax.swing.JButton();
        outputDirectoryLabel = new javax.swing.JLabel();
        autoExportSolutions = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        teamNameField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        sharedSecretField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        contestUrlField = new javax.swing.JTextField();
        joinContest = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        readAllSolutionsBtn = new javax.swing.JButton();
        sendAllSolutionsBtn = new javax.swing.JButton();

        jLabel1.setText("Problem type");

        batchSolver.setText("Batch Solver");
        batchSolver.setPreferredSize(new java.awt.Dimension(200, 23));
        batchSolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchSolverActionPerformed(evt);
            }
        });

        batchChecker.setText("Batch Checker");
        batchChecker.setPreferredSize(new java.awt.Dimension(200, 23));
        batchChecker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchCheckerActionPerformed(evt);
            }
        });
        batchChecker.setMaximumSize(new java.awt.Dimension(200, 23));
        batchChecker.setMinimumSize(new java.awt.Dimension(200, 23));
        batchChecker.setPreferredSize(new java.awt.Dimension(200, 23));

        setOutputDirectory.setText("Select output directory");
        setOutputDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDirectoryActionPerformed(evt);
            }
        });

        outputDirectoryLabel.setText("");

        autoExportSolutions.setText("Automatically output calculated solutions");
        autoExportSolutions.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                autoExportSolutionsChanged(e);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Contest");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("General");

        jLabel5.setText("Team name");

        teamNameField.setText(Sender.getTeamName());

        jLabel6.setText("Shared secret");

        sharedSecretField.setText(Sender.getSharedSecret());

        jLabel7.setText("Contest url");

        contestUrlField.setText(Sender.getConnectionString());

        if (!Sender.isJoinedContest()) {
            joinContest.setText("Join contest");
            sendAllSolutionsBtn.setEnabled(false);
        } else {
            joinContest.setEnabled(true);
            joinContest.setText("Leave contest");
        }
        joinContest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinContestActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        readAllSolutionsBtn.setText("Read all solutions");
        readAllSolutionsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readAllSolutionsBtnActionPerformed(evt);
            }
        });

        sendAllSolutionsBtn.setText("Send all solutions");
        sendAllSolutionsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendAllSolutionsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sendAllSolutionsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jSeparator2)
                                        .addComponent(jSeparator1)
                                        .addComponent(autoExportSolutions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(batchSolver, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                                        .addComponent(setOutputDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(8, 8, 8)
                                                                .addComponent(outputDirectoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                                                .addComponent(batchChecker, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel5)
                                                        .addComponent(jLabel6)
                                                        .addComponent(jLabel7))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(teamNameField)
                                                        .addComponent(sharedSecretField)
                                                        .addComponent(contestUrlField)))
                                        .addComponent(joinContest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(readAllSolutionsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(batchSolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(batchChecker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(setOutputDirectory)
                                        .addComponent(outputDirectoryLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(autoExportSolutions)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(readAllSolutionsBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(teamNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(sharedSecretField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(contestUrlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(joinContest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendAllSolutionsBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cancelButton)
                                        .addComponent(okButton))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void autoExportSolutionsChanged(java.awt.event.ActionEvent evt) {
        SettingsPane.setAutoExportSolutions(autoExportSolutions.isSelected());
    }

    private void batchCheckerActionPerformed(java.awt.event.ActionEvent evt) {
        if (batchChecker.getText().equals("Abort")) {
            if (checkerThread != null && checkerThread.isAlive()) {
                checkerThread.interrupt();
            }
            batchChecker.setText("Batch Checker");
        } else {
            if (SettingsPane.getExportPath() != null) {
                exportPicker.setCurrentDirectory(SettingsPane.getExportPath());
            }
            int returnVal = exportPicker.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                if (exportPicker.getSelectedFile().isDirectory()) {
                    batchChecker.setText("Abort");
                    Runnable r = new Runnable() {
                        @Override
                        public void run() {
                            batchChecker(exportPicker.getSelectedFile());
                            batchChecker.setText("Batch Checker");
                        }
                    };

                    checkerThread = new Thread(r);
                    checkerThread.start();

                }
            }
        }
    }

    private void batchSolverActionPerformed(java.awt.event.ActionEvent evt) {
        if (mainPane.getProblemsPanel().getProblems().size() == 0) {
            JOptionPane.showMessageDialog(this,
                    "Please first load a problem set before solving them.");
            return;
        }
        if (SettingsPane.getExportPath() == null) {
            JOptionPane.showMessageDialog(this,
                    "Please first select a location to store the solutions.");
            return;
        }
        if (!SettingsPane.isAutoExportSolutions()) {
            JOptionPane.showMessageDialog(this,
                    "Please note that by solving the solutions auto export will be turned on.");
        }
        BatchPane pane = new BatchPane(mainPane, "Batch solver");
        pane.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SettingsPane.setAutoExportSolutions(true);
                autoExportSolutions.setSelected(true);

                String[] appliedAlgos = e.getActionCommand().split(",");
                ArrayList<Algorithm> algoObjects = new ArrayList<>();
                for (Algorithm a : AlgorithmList.getAlgorithms()) {
                    for (String name : appliedAlgos) {
                        if (a.getClass().getSimpleName().equals(name)) {
                            algoObjects.add(a);
                        }
                    }
                }
                LinkedBlockingQueue<Runnable> q = new LinkedBlockingQueue<>();
                ThreadPoolExecutor ex = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() + 1,
                        Runtime.getRuntime().availableProcessors() + 1, 1000, TimeUnit.MILLISECONDS, q);
                ex.prestartAllCoreThreads();
                for (Problem p : mainPane.getProblemsPanel().getProblems()) {
                    for (Algorithm a : algoObjects) {
                        q.add(new Runnable() {
                            @Override
                            public void run() {
                                a.getRunnable(p).run();
                                synchronized (q) {
                                    q.notify();
                                }
                            }
                        });
                    }
                }

                //waiting mechanism
                synchronized (q) {
                    while (!q.isEmpty()) {
                        try {
                            q.wait();
                        } catch (InterruptedException e1) {
                            break;
                        }
                    }
                }
                ex.shutdown();
                try {
                    ex.awaitTermination(10, TimeUnit.DAYS);
                } catch (InterruptedException e1) {
                    ex.shutdownNow();
                }
                mainPane.getAlgorithmsPanel().syncViews();

            }
        });
        pane.setVisible(true);
    }

    private void outputDirectoryActionPerformed(java.awt.event.ActionEvent evt) {
        if (SettingsPane.getExportPath() != null) {
            exportPicker.setCurrentDirectory(SettingsPane.getExportPath());
        }
        int returnVal = exportPicker.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (exportPicker.getSelectedFile().isDirectory()) {
                SettingsPane.setExportPath(exportPicker.getSelectedFile());
                autoExportSolutions.setEnabled(true);
                String path = SettingsPane.getExportPath().getAbsolutePath();
                if (path.length() > 30) {
                    path = path.substring(0, 8) + "...." + path.substring(path.length() - 15, path.length());
                }
                outputDirectoryLabel.setText(path);
            }
        }
    }

    private void joinContestActionPerformed(java.awt.event.ActionEvent evt) {
        if (!Sender.isJoinedContest()) {
            Sender.setTeamName(teamNameField.getText());
            Sender.setSharedSecret(sharedSecretField.getText());
            Sender.setConnectionString(contestUrlField.getText());
            String result = Sender.joinContest();
            sendAllSolutionsBtn.setEnabled(true);
            if (result == null) {
                joinContest.setText("Leave contest");
            } else {
                JOptionPane.showMessageDialog(mainPane, result);
            }
        } else {
            Sender.leaveContest();
            sendAllSolutionsBtn.setEnabled(false);
            joinContest.setText("Join contest");
        }
    }

    private void readAllSolutionsBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (readAllSolutionsBtn.getText().equals("Abort")) {
            if (readerThread != null && readerThread.isAlive()) {
                readerThread.interrupt();
            }
            readAllSolutionsBtn.setText("Read all solutions");
        } else {
            if (SettingsPane.getExportPath() != null && SettingsPane.getExportPath().isDirectory()) {
                readAllSolutionsBtn.setText("Abort");
                Runnable r = new Runnable() {
                    @Override
                    public void run() {
                        mainPane.getSettingsPanel().batchReader(SettingsPane.getExportPath());
                        readAllSolutionsBtn.setText("Read all solutions - done");
                    }
                };

                readerThread = new Thread(r);
                readerThread.start();

            } else {
                System.err.println("This method can only be called when there is an export path");
            }

        }
    }

    private void sendAllSolutionsBtnActionPerformed(java.awt.event.ActionEvent evt) {
        Collection<Problem> problems = ProblemsPane.getProblems();
        for (Problem p : problems) {
            Collection<Solution> solutions = p.getAllSolutions();
            for (Solution s : solutions) {
                System.out.println("Sending Solution " + s.getName() + " for problem " + p.instanceName());
                Sender.sendSolution(p, s);
            }
        }
        System.out.println("Done sending solutions");
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        frame.dispose();
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {

        Sender.setTeamName(teamNameField.getText());
        Sender.setSharedSecret(sharedSecretField.getText());
        Sender.setConnectionString(contestUrlField.getText());

        frame.dispose();
    }

    private void batchChecker(File directory) {
        System.out.println("Checking " + directory.getAbsolutePath());
        File[] files = directory.listFiles();
        ArrayList<String> names = new ArrayList<>();
        ArrayList<String> problemName = new ArrayList<>();
        ArrayList<Double> score = new ArrayList<>();
        ArrayList<String> ruling = new ArrayList<>();
        for (File file : files) {
            if (Thread.interrupted()) {
                return;
            }
            if (file.isDirectory()) {
                batchChecker(file);
            } else {
                String name = file.getName().split("\\W")[0];
                if (mainPane.getProblemsPanel().getProblem(name) != null) {
                    Problem p = mainPane.getProblemsPanel().getProblem(name);
                    Solution s = p.parseSolution(file);
                    if (s == null) {
                        names.add(file.getName());
                        problemName.add(p.instanceName());
                        score.add(-1.0);
                        ruling.add("Unable to read");
                    } else {
                        names.add(file.getName());
                        problemName.add(p.instanceName());
                        if (s.isValid()) {
                            ruling.add("Valid");
                        } else {
                            ruling.add("Invalid");
                        }
                        score.add(s.computeQuality());
                    }
                    System.out.println("Added " + file.getName());
                }

            }
        }
        System.out.println("Writing CSV");
        String csvOutput = "Filename;Matched Problem;Ruling;Score\r\n";
        for (int i = 0; i < names.size(); i++) {
            csvOutput += names.get(i) + ";" + problemName.get(i) + ";" + ruling.get(i) + ";" + score.get(i) + "\r\n";
        }
        File file = new File(directory.getAbsolutePath() + File.separator + "results.csv");
        if (file.exists()) {
            file.delete();
        }
        try {
            file.createNewFile();
            try (FileOutputStream stream = new FileOutputStream(file)) {
                stream.write(csvOutput.getBytes());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("CSV written");
    }

    // Variables declaration - do not modify
    private javax.swing.JButton batchChecker;
    private javax.swing.JButton batchSolver;
    private javax.swing.JTextField contestUrlField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton joinContest;
    private javax.swing.JLabel outputDirectoryLabel;
    private javax.swing.JCheckBox autoExportSolutions;
    private javax.swing.JButton setOutputDirectory;
    private javax.swing.JTextField sharedSecretField;
    private javax.swing.JTextField teamNameField;
    private javax.swing.JButton readAllSolutionsBtn;
    private javax.swing.JButton sendAllSolutionsBtn;
    // End of variables declaration

    private static class FolderFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            return file.isDirectory();
        }

        @Override
        public String getDescription() {
            return "Directories only";
        }
    }
}
